syntax = "proto3";

package faltung.nerves.domotics.integrations.googlehome;

option go_package = "github.com/rmrobinson/nerves/services/domotics/integrations/googlehome";

message SyncRequest {
}
message SyncResponse {
    bytes payload = 1;
    string error_details = 2;
}
message DisconnectRequest {
}

// This integration doesn't take advantage of the opaque data field offered by the Google Home Action SDK.
// The nerves framework currently doesn't expose a comparable set of fields and enforces globally unique device IDs
// so the custom data was decided to be omitted for simplicity.
// The commands simply use the device ID to identify their targets for querying & execution.

message QueryRequest {
    repeated string device_ids = 1;
}
message QueryResponse {
    bytes payload = 1;
    string error_details = 2;
}

message ExecuteRequest {
    message Command {
        message ExecutionContext {
            bytes payload = 1;
        }

        repeated string device_ids = 1;
        repeated ExecutionContext execution_context = 2;
    }

    repeated Command commands = 1;
}
message ExecuteResponse {
    enum CommandStatus {
        UNSPECIFIED = 0;
        SUCCESS = 1;
        PENDING = 2;
        OFFLINE = 3;
        EXCEPTIONS = 4;
        ERROR = 5;
    }
    message CommandResult {
        repeated string device_ids = 1;
        CommandStatus status = 2;
        bytes states = 3;
        string error_code = 4;
    }

    repeated CommandResult results = 1;
    string error_details = 2;
}

message RegisterAgentRequest {
    string agent_id = 1;
}
message RequestSyncRequest {
}
message ReportStateRequest {
    bytes payload = 1;
}

message ServerRequest {
    string request_id = 1;
    oneof Field {
        SyncRequest sync_request = 2;
        QueryRequest query_request = 3;
        ExecuteRequest execute_request = 4;
        DisconnectRequest disconnect_request = 5;
    }
}

message ClientRequest {
    string request_id = 1;
    oneof Field {
        RegisterAgentRequest register_agent = 2;
        RequestSyncRequest request_sync = 3;
        ReportStateRequest report_state = 4;
        SyncResponse sync_response = 5;
        QueryResponse query_response = 6;
        ExecuteResponse execute_response = 7;
    }
}

// GoogleHomeService allows a cloud-hosted proxy for Google Home Smart Actions to multiplex handling
// of possibly many agents which are running on non-directly-Internet-reachable hosts.
// The basic use case is a home automation system, running on a home network, that wishes to interact
// with the Google Assistant but does not wish to directly register a port for callback handling locally.
// The server-side of the GoogleHomeService will register with the Google Home Smart Actions callback API,
// and route the incoming requests to the bidirectional streaming channel registered for that agent ID.
// The client-side of the GoogleHomeService will start up, connect to the server instance, register its client ID,
// and the a) stream device updates as it receives them to the server, as well as b) receive incoming requests
// from the Smart Home Action API (SYNC, QUERY, EXECUTE) and process them.
service GoogleHomeService {
    // StateSync offers a general-purpose, bidirectional channel for synchronization.
    // It enables the following flows:
    // Server -> Client command requests (async, with client-returned results)
    // Client -> Server updates  state and returns results (both async)
    // It must start with the client sending a RegisterAgent request.
    rpc StateSync(stream ClientRequest) returns (stream ServerRequest) {}
}
