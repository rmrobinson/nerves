syntax = "proto3";

package faltung.nerves.domotics.building;

option go_package = "github.com/rmrobinson/nerves/services/domotics/building";

import "google/protobuf/empty.proto";
import "services/domotics/bridge/bridge.proto";

message Climate {
    float temperature_celcius = 1;
    int32 humidity_percent = 2;
    float barometric_pressure_kpa = 3;
}

// A zone is a collection of devices and state in a location.
// A building, a floor or a room may have a zone, or more than one zone.
message Zone {
    message State {
        Climate climate = 1;
        bool occupied = 2;
        bool audio_active = 3;
        bool video_active = 4;
    }
    // The current state of this zone (these fields are all read-only).
    State current_state = 4;

    // The set of controllable and viewable devices located in this room.
    // It is not strictly safe to assume certain types will only appear once in this collection.
    repeated faltung.nerves.domotics.bridge.Device devices = 10;

    // A subset of the above devices, containing the lights
    repeated faltung.nerves.domotics.bridge.Device lights = 11;
    // A subset of the above devices, containing the speakers.
    // In most cases this will be 0 or 1.
    repeated faltung.nerves.domotics.bridge.Device speakers = 12;
}

// A room is a single location in a building that is logically separate from others.
message Room {
    string id = 1;
    string name = 2;
    string description = 3;

    Zone zone = 10;
}

// A floor is a physically distinct collection of rooms in a building.
message Floor {
    string id = 1;
    string name = 2;
    string description = 3;
    int32 level = 4;

    // Some floors may have sensors or other things (lights?) not isolated to a single room.
    Zone zone = 10;
    // Update of rooms on this floor.
    repeated Room rooms = 11;
}

// A building is a physically distinct structure containing rooms and floors.
message Building {
    string id = 1;
    string name = 2;
    string description = 3;
    string address = 4;

    // A building may have some devices (sensors mostly) that are not tied to a given room.
    Zone zone = 10;
    // Collection of floors in this building.
    repeated Floor floors = 11;
    // Bridges active in this building
    repeated faltung.nerves.domotics.bridge.Bridge bridges = 12;
}


message ListBuildingsRequest {
}
message ListBuildingsResponse {
    repeated Building buildings = 1;
}

message GetBuildingRequest {
    string building_id = 1;
}

message ListFloorsRequest {
    string building_id = 1;
}
message ListFloorsResponse {
    repeated Floor floors = 1;
}

message GetFloorRequest {
    string id = 1;
}

message BuildingUpdate {
    Building building = 1;
    string floor_id = 2;
}
message FloorUpdate {
    Floor floor = 1;
    string building_id = 2;
}
message RoomUpdate {
    Room room = 1;
    string floor_id = 2;
}

message StreamBuildingUpdatesRequest {
}
message Update {
    enum Action {
        ADDED = 0;
        CHANGED = 1;
        REMOVED = 2;
    }

    Action action = 1;
    oneof Update {
        FloorUpdate floor_update = 2;
        RoomUpdate room_update = 3;
        BuildingUpdate building_update = 4;

        faltung.nerves.domotics.bridge.BridgeUpdate bridge_udpate = 5;
        faltung.nerves.domotics.bridge.DeviceUpdate device_update = 6;
    }
}

service BuildingService {
    rpc ListBuildings(ListBuildingsRequest) returns (ListBuildingsResponse) {}

    rpc GetBuilding(GetBuildingRequest) returns (Building) {}

    rpc ListFloors(ListFloorsRequest) returns (ListFloorsResponse) {}

    rpc GetFloor(GetFloorRequest) returns (Floor) {}

    rpc StreamBuildingUpdates(StreamBuildingUpdatesRequest) returns (stream Update) {}
}

message CreateBuildingRequest {
    Building building = 1;
}
message UpdateBuildingRequest {
    string id = 1;
    string version = 2;
    Building building = 10;
}
message DeleteBuildingRequest {
    string id = 1;
}

message CreateFloorRequest {
    string building_id = 1;
    Floor floor = 2;
}
message UpdateFloorRequest {
    string id = 1;
    string version = 2;
    Floor floor = 10;
}
message DeleteFloorRequest {
    string id = 1;
}

message CreateRoomRequest {
    string floor_id = 1;
    Room room = 2;
}
message UpdateRoomRequest {
    string id = 1;
    string version = 2;
    Room room = 10;
}
message DeleteRoomRequest {
    string id = 1;
}

message AddBridgeRequest {
    string parent_id = 1;
    string bridge_id = 2;
}
message RemoveBridgeRequest {
    string parent_id = 1;
    string bridge_id = 2;
}
message AddDeviceRequest {
    string parent_id = 1;
    string device_id = 2;
}
message RemoveDeviceRequest {
    string parent_id = 1;
    string device_id = 2;
}

service BuildingAdminService {
    // The set of APIs operating on a building.
    rpc CreateBuilding(CreateBuildingRequest) returns (Building) {}

    rpc UpdateBuilding(UpdateBuildingRequest) returns (Building) {}

    rpc DeleteBuilding(DeleteBuildingRequest) returns (google.protobuf.Empty) {}

    rpc AddBuildingBridge(AddBridgeRequest) returns (Building) {}

    rpc RemoveBuildingBridge(RemoveBridgeRequest) returns (Building) {}

    // The set of APIs operating on a floor.
    rpc CreateFloor(CreateFloorRequest) returns (Floor) {}

    rpc UpdateFloor(UpdateFloorRequest) returns (Floor) {}

    rpc DeleteFloor(DeleteFloorRequest) returns (google.protobuf.Empty) {}

    //rpc AddFloorDevice(AddDeviceRequest) returns (Floor) {}

    //rpc RemoveFloorDevice(RemoveDeviceRequest) returns (Floor) {}


    // The set of APIs operating on a room.
    rpc CreateRoom(CreateRoomRequest) returns (Room) {}

    rpc UpdateRoom(UpdateRoomRequest) returns (Room) {}

    rpc DeleteRoom(DeleteRoomRequest) returns (google.protobuf.Empty) {}

    //rpc AddRoomDevice(AddDeviceRequest) returns (Room) {}

    //rpc RemoveRoomDevice(RemoveDeviceRequest) returns (Room) {}
}
